
[build-system]
requires = ["setuptools"]  # REQUIRED if [build-system] table is used
build-backend = "setuptools.build_meta"  # If not defined, then legacy behavior can happen.


[project]
name = "milanllm" 


version = "0.0.1"  # REQUIRED, although can be dynamic


description = "LLM Project"

readme = "README.md"


requires-python = ">=3.10"

#license = {file = "LICENSE.txt"}


keywords = ["llm", "setuptools", "development"]


authors = [
  {name = "Ankit Kumar Pandey", email = "itsankitkp@gmail.com" }
]


maintainers = [
  {name = "Ankit Kumar Pandey", email = "itsankitkp@gmail.com" }
]

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 3 - Alpha",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Topic :: Software Development :: LLM",

  # Pick your license as you wish
  "License :: OSI Approved :: MIT License",


  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",

]


#dependencies = [
#  "pytorch",
#  "tqdm",
#  "requests",
#  "mwparserfromhell"
#]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Optional dependencies the project provides. These are commonly 
# referred to as "extras". For a more extensive definition see:
# https://packaging.python.org/en/latest/specifications/dependency-specifiers/#extras
[project.optional-dependencies]
dev = ["check-manifest"]
test = ["coverage"]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]
"Homepage" = "https://github.com/itsankitkp/milanllm"
"Bug Reports" = "https://github.com/itsankitkp/milanllm/issues"
"Funding" = "https://donate.pypi.org"
"Say Thanks!" = "http://saythanks.io/to/example"
"Source" = "https://github.com/itsankitkp/milanllm"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
#[project.scripts]
#sample = "sample:main"


# This is configuration specific to the `setuptools` build backend.
# If you are using a different build backend, you will need to change this.
[tool.setuptools]
# If there are data files included in your packages that need to be
# installed, specify them here.
#package-data = {"sample" = ["*.dat"]}